data:
  todos:
    - content: 크롬 익스텐션(특수문자 검색기) 업데이트 하기
      createdAt: 2018-04-25
      doneAt: 2018-04-29
    - content: 블로그에 JS 관련 RSS 피드 읽어오는 기능 추가하기
      createdAt: 2018-04-25
      doneAt: null
    - content: Ethereum DApp 관련 공부하기
      createdAt: 2018-04-25
      doneAt: null
    - content: 크롬 익스텐션(이미지 다운로더) 업데이트 하기
      createdAt: 2018-04-29
      doneAt: 2018-04-29
  til:
    - content: |
        ## 깃허브 커밋 시 공동 저자 입력(?)하기

        ```
        Commit message

        Co-authored-by: Joel Califa <602352+califa@users.noreply.github.com>
        Co-authored-by: Matt Clark <44023+mclark@users.noreply.github.com>
        ```

        ref. https://blog.github.com/2018-01-29-commit-together-with-co-authors/
      reference: https://blog.github.com/2018-01-29-commit-together-with-co-authors/
      createdAt: 2018-04-25
    - content: |
        ## with 문

        ```
        const a = document.createElement('a');
        with (a) {
          setAttribute ('href', 'https://www.google.com/');
          // use setAttribute instead of a.setAttribute
        }
        ```

        ref. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with
      reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with
      createdAt: 2018-04-29
    - content: |
        ## 문자열 치환 시 new line 추가

        다음과 같은 텍스트 파일이 있다고 가정한다.

        ```
        I want to add new line from here. blah~ blah~
        ```

        `here.` 부분에서 새로운 라인을 추가하고자 한다면,
        `:%s/here\.\s/here.^M`을 입력한 뒤, `Return`한다.

        여기서 중요한 것은, `^M`은 `Ctrl + V + M`을 통해 입력해야한다는 것이다.
        (`Ctrl`은 `M`을 누를 때까지 누르고 있어야 한다.)
      reference: null
      createdAt: 2018-05-02
    - content: |
        ## webpack UMD 라이브러리 번들링 시 글로벌 변수

        `webpack`의 `configuration`에서 `output.libraryTarget`을 `UMD`(Universal Module Definition)로 설정하면, `globalObject`는 `window`를 기본값으로 하여 번들링이 된다.

        `window`와 같은 변수를 사용하지 못하는 환경을 고려해야한다면, `globalObject`를 `this`로 한다.

        ```
        output: {
          ...
          libraryTarget: 'umd',
          globalObject: 'this',
        },
        ```
      reference: null
      createdAt: 2018-05-08
    - content: |
        ## 지워진 브랜치 복구하기

        `git reflog` 명렁어를 이용한다.
        (이 명령어는 `HEAD`가 가리키는 커밋이 바뀔 때마다 해당 커밋을 기록한다.)

        사용 예는 다음과 같다.

        ```
        # on master branch
        $ git branch -D foo
        $ git reflog
        821fee9 (HEAD -> master, origin/master, origin/foo) HEAD@{0}: checkout: moving from foo to master
        821fee9 (HEAD -> master, origin/master, origin/foo) HEAD@{1}: checkout: moving from master to foo
        # above 2 commits have different sha if commit log is different with each other
        $ git checkout 821fee9 # checkout with hash
        $ git checkout -b foo # create new branch
        ```
      reference: https://stackoverflow.com/questions/3640764/can-i-recover-a-branch-after-its-deletion-in-git
      createdAt: 2018-05-09
  bookmarks:
    - name: The Dev Community
      link: http://dev.to/
    - name: 5 Ideas a day
      link: https://www.fiveideasaday.com/
