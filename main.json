{
  "data": {
    "todos": [
      {
        "content": "크롬 익스텐션(특수문자 검색기) 업데이트 하기",
        "createdAt": "2018-04-25T00:00:00.000Z",
        "doneAt": "2018-04-29T00:00:00.000Z"
      },
      {
        "content": "블로그에 JS 관련 RSS 피드 읽어오는 기능 추가하기",
        "createdAt": "2018-04-25T00:00:00.000Z",
        "doneAt": null
      },
      {
        "content": "Ethereum DApp 관련 공부하기",
        "createdAt": "2018-04-25T00:00:00.000Z",
        "doneAt": null
      },
      {
        "content": "크롬 익스텐션(이미지 다운로더) 업데이트 하기",
        "createdAt": "2018-04-29T00:00:00.000Z",
        "doneAt": "2018-04-29T00:00:00.000Z"
      }
    ],
    "til": [
      {
        "content": "## 깃허브 커밋 시 공동 저자 입력(?)하기\n\n```\nCommit message\n\nCo-authored-by: Joel Califa <602352+califa@users.noreply.github.com>\nCo-authored-by: Matt Clark <44023+mclark@users.noreply.github.com>\n```\n\nref. https://blog.github.com/2018-01-29-commit-together-with-co-authors/\n",
        "reference": "https://blog.github.com/2018-01-29-commit-together-with-co-authors/",
        "createdAt": "2018-04-25T00:00:00.000Z"
      },
      {
        "content": "## with 문\n\n```\nconst a = document.createElement('a');\nwith (a) {\n  setAttribute ('href', 'https://www.google.com/');\n  // use setAttribute instead of a.setAttribute\n}\n```\n\nref. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with\n",
        "reference": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with",
        "createdAt": "2018-04-29T00:00:00.000Z"
      },
      {
        "content": "## 문자열 치환 시 new line 추가\n\n다음과 같은 텍스트 파일이 있다고 가정한다.\n\n```\nI want to add new line from here. blah~ blah~\n```\n\n`here.` 부분에서 새로운 라인을 추가하고자 한다면,\n`:%s/here\\.\\s/here.^M`을 입력한 뒤, `Return`한다.\n\n여기서 중요한 것은, `^M`은 `Ctrl + V + M`을 통해 입력해야한다는 것이다.\n(`Ctrl`은 `M`을 누를 때까지 누르고 있어야 한다.)\n",
        "reference": null,
        "createdAt": "2018-05-02T00:00:00.000Z"
      },
      {
        "content": "## webpack UMD 라이브러리 번들링 시 글로벌 변수\n\n`webpack`의 `configuration`에서 `output.libraryTarget`을 `UMD`(Universal Module Definition)로 설정하면, `globalObject`는 `window`를 기본값으로 하여 번들링이 된다.\n\n`window`와 같은 변수를 사용하지 못하는 환경을 고려해야한다면, `globalObject`를 `this`로 한다.\n\n```\noutput: {\n  ...\n  libraryTarget: 'umd',\n  globalObject: 'this',\n},\n```\n",
        "reference": null,
        "createdAt": "2018-05-08T00:00:00.000Z"
      },
      {
        "content": "## 지워진 브랜치 복구하기\n\n`git reflog` 명렁어를 이용한다.\n(이 명령어는 `HEAD`가 가리키는 커밋이 바뀔 때마다 해당 커밋을 기록한다.)\n\n사용 예는 다음과 같다.\n\n```\n# on master branch\n$ git branch -D foo\n$ git reflog\n821fee9 (HEAD -> master, origin/master, origin/foo) HEAD@{0}: checkout: moving from foo to master\n821fee9 (HEAD -> master, origin/master, origin/foo) HEAD@{1}: checkout: moving from master to foo\n# above 2 commits have different sha if commit log is different with each other\n$ git checkout 821fee9 # checkout with hash\n$ git checkout -b foo # create new branch\n```\n",
        "reference": "https://stackoverflow.com/questions/3640764/can-i-recover-a-branch-after-its-deletion-in-git",
        "createdAt": "2018-05-09T00:00:00.000Z"
      }
    ],
    "bookmarks": [
      {
        "name": "The Dev Community",
        "link": "http://dev.to/"
      },
      {
        "name": "5 Ideas a day",
        "link": "https://www.fiveideasaday.com/"
      }
    ]
  }
}
